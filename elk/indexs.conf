input {
  redis {
     type => "access"
     add_field => {}
     batch_count => 10
     codec => "plain"
     data_type => "list"
     db => 0
     host => "192.168.1.11"
     port => 6379
     password => "admim"
     key => "access"
     #threads => 1
     #timeout => 5
  }

#  redis {
#     type => "accessv2"
#     host => "192.168.1.11"
#     port => 6379
#     password => "admim"
#     db => 0
#     data_type => "list"
#     key => "accessv2"
#  }

  redis {
     type => "stream"
     host => "192.168.1.11"
     port => 6379
     password => "admim"
     db => 0
     data_type => "list"
     key => "stream"
  }
}

filter {
  if [type] == "access" {
          grok {
              patterns_dir => "/opt/logstash-2.3.4/config/grok"
              match => [
                "message","%{ACCESS}",
                "message","%{ACCESS1}",
		"message","%{ONLINE_USER}",
		"message","%{STREAMKS}",
		"message","%{STREAMGS}",
		"message","%{TOTAL_USER}"
               ]
              remove_field => ["message"]
          }

  	geoip {
		source => "IpFromStream"
		target => "geoip"
		database => "/opt/logstash-2.3.4/config/GeoLiteCity.dat"
  	}
        date {
              match => [ "log_timestamp","yyyy-MM-dd HH:mm:ss,SSS"]
              target => "@timestamp"
        }

  }
#else if [type] == "accessv2" {
#          grok {
#            patterns_dir => "/opt/logstash-2.3.4/config/grok"
#            match => [
#                 "message","%{ACCESSV2}"
#		#"message","%{ACCESS_RESPONSEV2}"
#                ]
#            remove_field => ["message"]
#          }
#          json {
#                source => "req_access"
#                target => "jsoncontent"
#          }
#	  #json {
#          #      source => "response_access"
#          #      target => "jsoncontent"
#          #}
#          date {
#              match => [ "log_time","yyyy-MM-dd HH:mm:ss,SSS"]
#	      target => "@timestamp"
#          }
#	  mutate {
#              convert => ["req_time","integer"]
#          }
#	      
#  }
else if [type] == "stream" {
          grok {
            patterns_dir => "/opt/logstash-2.3.4/config/grok"
            match => [
                 "message","%{STREAMV2}"
                ]
            remove_field => ["message"]
          }
          json {
                source => "stream_status"
                target => "jsoncontent"
          }
          date {
              match => [ "log_time","yyyy-MM-dd HH:mm:ss,SSS"]
              target => "@timestamp"
          }
  }
  mutate {
	convert => ["start_time","float"]
        convert => ["snapoff","float"]
	convert => ["snapoff_time","float"]
        convert => ["timedelay","float"]
        convert => ["request_time","float"]
        convert => ["user_id","integer"]
        convert => ["room_id","integer"]
        convert => ["user_number","integer"]
        convert => ["total_user","integer"]
  }

  if "_grokparsefailure" in [tags] {
        drop { }
  }
}

output {
  stdout {codec => "rubydebug"}
  if [type] == "access" {
    elasticsearch {
        action => index            # string (optional), default: "index"
        index => "logstash-%{+YYYY.MM.dd}"
        document_type => "access"      
                                   # bind_port => ... # number (optional)
#       cluster => "elasticsearch" # string (optional) The name of your cluster if you set it on the Elasticsearch side. Useful for discovery.
        codec => "rubydebug"       # codec (optional), default: "plain"
#       embedded => false          # boolean (optional), default: false
        flush_size => 5000         # number (optional), default: 5000
        hosts => "192.168.1.11:9200"  # string (optional) This is only required if the normal multicast/cluster discovery stuff won't work in your environment.
        idle_flush_time => 1       # number (optional), default: 1
        manage_template => true    # boolean (optional), default: true
                                   # node_name => ... # string (optional)
#       port => 9200              # string (optional)
#       protocol => "http"        # string, one of ["node", "transport", "http"] (optional)
                                   # user => username # string
                                   # password => password # string
                                   # template => ... # a valid filesystem path (optional)
        template_name=>"logstash"  # template_name => "logstash" # string (optional), default: "logstash"
        template_overwrite => true # boolean (optional), default: false
        workers => 1               # number (optional), default: 1
   }
  }
#else if [type] == "accessv2" {
#  	elasticsearch {
#	  codec => "json"
#          index => "logstash-access-%{+YYYY.MM.dd}"
#	  hosts => "192.168.1.11:9200"
#	  document_type => "accessv2"      
#	  template_overwrite => true
#        }
#   }
else if [type] == "stream" {                                                                                                                                       
        elasticsearch {                                                                                                                                                 
          codec => "json"                                                                                                                                               
          index => "logstash-stream-%{+YYYY.MM.dd}"                                                                                                                     
          hosts => "192.168.1.11:9200"                                                                                                                                
          document_type => "stream"                                                                                                                                   
          template_overwrite => true                                                                                                                                    
        }                                                                                                                                                               
   }                 
}
